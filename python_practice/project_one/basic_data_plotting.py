import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import basic_data_analysis as bda

def lineplots(csv_files: list, labels: dict = None, title: str = None, use_grid: bool = True):
    """Creates lineplots based off of a set of data

    Args:
        csv_files (list): A list of cleaned 2D pandas dataframes
        labels (dict, optional): A dictionary containing plot label information. Defaults to None.
        title (str, optional): The title to use for each plot. Defaults to None.
        use_grid (bool, optional): Self explanatory. Defaults to True.
    """
    if labels:
        keys = list(labels.keys())                                      # create a list of keys in the dictionary
    for i, file in enumerate(csv_files):
        plot_label = keys[i] if labels else i                           # extract first label if given
        x_label = labels[plot_label]['x'] if labels else 'X Values'     # access the key's plot labels in the dictionary  
        y_label = labels[plot_label]['y'] if labels else 'Y Values'
        plt.figure(figsize = (8, 6))                                    # set the figure size
        x = file.iloc[:, 0]                                             # entire first column
        y = file.iloc[:, 1]                                             # entire second column
        sns.lineplot(x = x, y = y, marker = 'o', label = f"Plot: {plot_label}")
        plt.xlabel(x_label)                                             # following is very similar to MATLAB; add elements and then show
        plt.ylabel(y_label)
        plt.title(title if title else 'Plotted Data')
        plt.grid(use_grid)
        plt.legend()
        plt.show()                                                      # blocks=False would allow polts to be shown at the same time on a timer 
        # plt.pause()                                                   # uncomment this to show multiple plots, argument alters time on screen
    # plt.show()                                                        # having this outside the loop shows all plots at the same time

def histograms(csv_files: list, bin_size: int = 100, titles: list = None, use_kde: bool = False):
    """Creates histograms based off of a set of data

    Args:
        csv_files (list): A list of cleaned 2D pandas dataframes
        bin_size (int, optional): The size to use for each bin. Defaults to 100.
        titles (list, optional): Corresponding titles for each dataframe. Defaults to None.
        use_kde (bool, optional): Determines if the smoothing function should be shown. Defaults to False.
    """    
    for title, file in enumerate(csv_files):
        data_set = file.iloc[:, 1]
        plt.figure(figsize = (8, 6))
        sns.histplot(data = data_set, bins = bin_size, kde = use_kde)
        plt.title(titles[title] if titles else 'Histogram')
        plt.show()

def pie_chart(names: list, values: list, colors: list = None, title: str = 'Pie Chart'):
    """Creates a pie chart out of a set of data

    Args:
        names (list): The names of each section
        values (list): The partition of the circle for each name
        colors (list, optional): Colors to use for the partitions. Defaults to None.
        title (str, optional): The title to use. Defaults to 'Pie Chart'.

    Raises:
        ValueError: If the values do not sum to 100
    """    
    if sum(values) != 100:
        raise ValueError('Values must sum to 100')                      # partitions of a circle, should add to 100
    plt.figure(figsize = (5, 5))
    plt.pie(values, labels = names, colors = colors)                    # colors will be autogenerated if None
    plt.title(title)
    plt.show()

def bar_chart(names: list, values: list, colors: list = None, title: str = 'Bar Chart'):
    """Creates a bar chart out of given data

    Args:
        names (list): The names/categories of the bars
        values (list): The quatities for each category
        colors (list, optional): The colors of each category. Defaults to None.
        title (str, optional): The desired title of the chart. Defaults to 'Bar Chart'.
    """    
    plt.figure(figsize = (5,5))
    bars = plt.bar(names, values, color = colors)                       # creates a bar container (object?) which works with the bar_label function
    plt.bar_label(bars)
    plt.title(title)
    plt.show()

def heatmap(csv_file: pd.DataFrame, color: str = 'coolwarm', title: str = 'Heatmap', annotation: bool = False):
    """Creates a heatmap out of given data

    Args:
        csv_file (pd.DataFrame): The DataFrame to use
        color (str, optional): The color scheme to use for the map. Defaults to 'coolwarm'.
        title (str, optional): The title to use for the map. Defaults to 'Heatmap'.
        annotation (bool, optional): Determines if to show the data markers on the map. Defaults to False.
    """    
    sns.heatmap(csv_file, annot = False, cmap = color)                   # annotation shows data points on heatmap
    plt.title(title)
    plt.show()
    
if __name__ == "__main__":
    # Create the data objects
    data = ['sample', 'keplers_equation']
    labels = {
        'Distance over Time' : { 'x' : 'time (s)', 'y' : 'distance (m)'},
        'Ellipse distance' : {'x' : 'eccentric anomaly', 'y' : 'mean anomaly'}
    }
    cleaned_data = bda.create_data_list(data)
    names = ['Math', 'Chem', 'Comp Sci', 'Religion']
    values = [20, 45, 10, 25]
    colors = []
    title = 'Courses'
    
    # Plot the data!
    # lineplots(cleaned_data, labels)
    # histogram(cleaned_data)
    # pie_chart(names, values, title = title)
    # bar_chart(names, values, title = title)
    for file in cleaned_data: heatmap(file)